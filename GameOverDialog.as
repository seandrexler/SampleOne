package{	import flash.display.Graphics;	import flash.display.Sprite;	import flash.events.Event;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.text.AntiAliasType;		/**	 * Class that displays game over and reset text at the end of the game.	 */	public class GameOverDialog extends Sprite	{		private var _mcBG:Sprite;	// Dialog background graphic.		private var _txt:TextField;	// Text displayed on dialog.				/*		 * Constructor for the dialog; calls the init() method.		 */		public function GameOverDialog()		{			super();			init();		}				/*		 * Initializes the dialog by creating a little graphical background and the TextField message.		 */		private function init():void		{			if(_mcBG)				return;			addEventListener(Event.ADDED_TO_STAGE, stageHandler);			_mcBG = new Sprite();			_mcBG.graphics.beginFill(0x333333);			_mcBG.graphics.lineStyle(5, 0x3AB34F);			_mcBG.graphics.drawRoundRect(0, 0, 200, 100, 10);			_mcBG.graphics.endFill();			addChild(_mcBG);						_txt = new TextField();			_txt.x = 5;			_txt.y = 5;			_txt.width = 190;			_txt.height = 90;			//_txt.embedFonts = true;            _txt.antiAliasType = AntiAliasType.ADVANCED;			_txt.autoSize = TextFieldAutoSize.CENTER;			_txt.text = "Game Over\n\nReset";			_txt.setTextFormat(new TextFormat('Arial', '26', 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER));			_mcBG.addChild(_txt);		}				/**		 * Draws a tint to prevent touching the gameboard and updates the 'Game Over' dialogs position		 * on the display list.		 *		 * @param	event	Event dispatched by the dialog when it is added to the display list.		 */		private function stageHandler(event:Event):void		{			this.graphics.beginFill(0x000000, 0.4);			this.graphics.drawRect(0,0,stage.width,stage.height);			this.graphics.endFill();						if(_mcBG.x == 0)			{				_mcBG.x = (stage.width - _mcBG.width)/2;				_mcBG.y = (stage.height - _mcBG.height)/2;			}			else			{				_mcBG.visible = true;			}		}	}}