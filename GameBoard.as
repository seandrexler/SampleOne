package{	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;		/**	 * View	 */	public class GameBoard extends Sprite	{		private var _rowHeight:int = 100;			// Row Height		private var _colWidth:int = 100;			// Column Width		private var _mcGameOver:Sprite;				// Game over dialog		private var _mcBeginGame:BeginGameDialog;	// Begin new game dialog		private var _model:GameBoardModel;			// Model		private var _controller:GameBoardController;// Controller				/**		 * Constructor for view. Sets reference to model and controller. Calls initialization method for class.		 *		 * @param	model	Data model for game.		 * @param	controller	Controller for game.		 */		public function GameBoard(model:GameBoardModel, controller:GameBoardController)		{			super();			_model = model;			_controller = controller;			init();		}				/**		 * Adds listeners for model and flashplayer stage events.		 */		private function init():void		{			_model.addEventListener(Event.CHANGE, modelChangeHandler);			_model.addEventListener(Event.COMPLETE, modelCompleteHandler);			_model.addEventListener(GameBoardModel.DATA_INIT, initGameBoard);			addEventListener(Event.ADDED_TO_STAGE, stageHandler);		}				/**		 * Creates and displays the begin new game dialog.		 */		private function beginGame():void		{			if(!_mcBeginGame)			{				_mcBeginGame = new BeginGameDialog(_model.numberHidden);				_mcBeginGame.addEventListener(MouseEvent.CLICK, beginGameClickHandler);				addChild(_mcBeginGame);			}			else			{				_mcBeginGame.visible = true;				_mcBeginGame.items = _model.numberHidden;			}		}				/**		 * Handles the flashplayer stage events.		 *		 * @param	event	Event dispatche when the stage of the movie has been clicked.		 */		private function stageHandler(event:Event):void		{			stage.addEventListener(MouseEvent.CLICK, boardClickHandler);		}				/**		 * Creates the game board and calls to show the begin new game dialog.		 *		 * @param	event	Event dispatched by the model once the data has been set for a new game.		 */		private function initGameBoard(event:Event):void		{			this.graphics.clear();			this.graphics.beginFill(0x000000);			var currentY:Number = 0;			for(var i:uint = 0;i<_model.rows;i++)			{				var currentX:Number = 0;				for(var j:uint = 0;j<_model.cols;j++)				{					if((i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1))						this.graphics.drawRect(currentX, currentY, _colWidth, _rowHeight);					currentX += _colWidth;				}				currentY += _rowHeight;			}			this.graphics.endFill();			beginGame();		}				/**		 * Handles mouse click events on the game board. Calculates the row and column and calls the controller.		 *		 * @param	event	Event dispatche by the stage whenever the mouse clicks.		 */		private function boardClickHandler(event:MouseEvent):void		{			var nRow:int = this.mouseY / _rowHeight;			var nCol:int = this.mouseX / _colWidth;			_controller.updateSpace(nRow, nCol);		}				/**		 * Listens for the change handler dispatched by the model. Colors the space selected red (0xFF0000) if incorrect or blue		 * (0x0000FF) if correct.		 *		 *	@param	event Event dispatched by the model when a space is selected/guessed.		 */		private function modelChangeHandler(event:Event):void		{			var color:uint = 0xFF0000;			if(_model.selectedPos != -1)				color = 0x0000FF;						this.graphics.beginFill(color);			this.graphics.drawRect(_colWidth*_model.selectedColumn + 20, _rowHeight * _model.selectedRow + 20, _colWidth - 40, _rowHeight - 40);			this.graphics.endFill();		}				/**		 * Listens for the complete state; i.e. end of game. Creates/displays the game over dialog.		 *		 * @param	event	Event dispatched by the model when all of the hidden pieces/items have been found.		 */		private function modelCompleteHandler(event:Event):void		{			if(!_mcGameOver)			{				_mcGameOver = new GameOverDialog();				_mcGameOver.addEventListener(MouseEvent.CLICK, gameOverClickHandler);				addChild(_mcGameOver);			}			else			{				_mcGameOver.visible = true;			}		}				/**		 * Hides the begin new game dialog.		 *		 * @param	event	Event dispatche by clicking on the begin new game dialog.		 */		private function beginGameClickHandler(event:MouseEvent):void		{			event.stopImmediatePropagation();			_mcBeginGame.visible = false;		}				/**		 * Hides the game over dialog.		 *		 * @param	event	Event dispatche by clicking on the game over dialog.		 */		private function gameOverClickHandler(event:MouseEvent):void		{			event.stopImmediatePropagation();			_mcGameOver.visible = false;			_controller.reset();		}	}}